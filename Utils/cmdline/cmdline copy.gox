package cmdlinex

//==============================================================================
// GMMEGoLib for Go/Golang
// Copyright (c) 2023, GMM Enterprises, LLC.
// Licensed under the GMM Software License
// All rights reserved
//==============================================================================
//	Author:	David Crickenberger
// -----------------------------------------------------------------------------
// Package:
//		GMMEGoLib/Utils/cmdline
//
// 	Description:
//		Command line processor package.
//
//==============================================================================
//==============================================================================

import (
	"fmt"
	"math/rand"
	"os"
	"regexp"
	"sort"
	"strings"
	"time"
)

// -----------------------------------------------------------------------------
// -- Constants
// -----------------------------------------------------------------------------
const (
	GETDBLOGON = iota + 1
	GETOPTVALUE
	GETOPTVALUEDEF
	GETPATHOPT
	ISOPT
	ISOPT_SETON
	ISOPT_SETOFF
)

type soptItem struct {
	Opt     string
	Val     string
	m_val   string
	OptFile string
	Tags    []string
}

type SCMDLine struct {
	m_dbgOn  bool
	m_isInit bool
	m_opts   map[string]*soptItem
}

func (o *soptItem) TagExists(a_tag string) bool {
	for _, l_tag := range o.Tags {
		if l_tag == a_tag {
			return true
		}
	}
	return false
}

// -----------------------------------------------------------------------------
// -- Constructors
// -----------------------------------------------------------------------------
// func newSOptItem(a_opt string, a_val *string, a_optFile *string) *soptItem {
func newSOptItem(a_opt string, a_val string, a_optFile string, a_tags []string) *soptItem {
	l_opt := new(soptItem)

	l_opt.Opt = a_opt
	l_opt.Val = xSubEnv(a_val)
	l_opt.m_val = a_val
	l_opt.OptFile = a_optFile
	l_opt.Tags = a_tags

	return l_opt
}
func NewSCMDLine() *SCMDLine {
	l_cmdline := new(SCMDLine)

	l_cmdline.m_dbgOn = false
	l_cmdline.m_isInit = true
	l_cmdline.m_opts = make(map[string]*soptItem)

	return l_cmdline
}

// -----------------------------------------------------------------------------
// -- Methods SCMDLine SetXXX
// -----------------------------------------------------------------------------
func (c *SCMDLine) SetDebug(a_dbgOn bool) {
	c.m_dbgOn = a_dbgOn
}

// -----------------------------------------------------------------------------
// -- Methods SCMDLine Dump
// -----------------------------------------------------------------------------
func (c *SCMDLine) Dump() {
	//-- make sure object is fully initialized
	if !c.m_isInit {
		fmt.Println("SCMDLine: Dump - nothing exists...")
		return
	}

	fmt.Println("SCMDLine: Dump - beg")

	//--------------------------------------------------------------------------
	//-- create sorted list of keys of options
	l_keys := make([]string, 0, len(c.m_opts))
	for l_key := range c.m_opts {
		l_keys = append(l_keys, l_key)
	}
	sort.Strings(l_keys)

	//--------------------------------------------------------------------------
	//-- output keys, generating rand object for secret values
	l_rand := rand.New(rand.NewSource(time.Now().UnixNano()))
	for _, l_key := range l_keys {
		//----------------------------------------------------------------------
		//-- get opt, format a string, and output
		l_opt := c.m_opts[l_key]

		l_out := strings.Builder{}
		l_out.Grow(128)

		l_val := l_opt.Val
		if len(l_opt.Tags) > 0 && l_opt.TagExists("HIDE") {
			l_val = strings.Repeat("*", l_rand.Intn(11)+10)
		}
		l_out.WriteString(fmt.Sprintf("   %s == [%s]", l_key, l_val))

		if len(l_opt.Tags) > 0 {
			l_out.WriteString(fmt.Sprintf("; Tags = %v", l_opt.Tags))
		}

		if l_opt.m_val != l_opt.Val {
			l_out.WriteString(fmt.Sprintf("; OrigVal = [%s]", l_opt.m_val))
		}

		if l_opt.OptFile != "" {
			l_out.WriteString(fmt.Sprintf("; OptFile = %s", l_opt.OptFile))
		}

		fmt.Println(l_out.String())
	}

	fmt.Println("SCMDLine: Dump - end")
}

// =============================================================================
// -----------------------------------------------------------------------------
// -- Methods SCMDLine AddXXX
// =============================================================================
// -----------------------------------------------------------------------------
// -- AddArgsArray()
func (c *SCMDLine) AddArgsArray(a_args []string) {
	//--------------------------------------------------------------------------
	//-- if debug on dump a_args
	if c.m_dbgOn {
		fmt.Println("DBG-Utils::CmdLine::AddArgsArray == args - beg:")
		fmt.Println("DBG-a_args -- beg:")
		for l_i, l_arg := range a_args {
			fmt.Printf("%d %s\n", l_i, l_arg)
		}
		fmt.Println("DBG-a_args -- end:")
		fmt.Println("DBG-Utils::CmdLine::AddArgsArray == args - end:")
	}

	//--------------------------------------------------------------------------
	//-- process
	var l_file string = ""

	var l_i = 0
	for l_i < len(a_args) {
		//----------------------------------------------------------------------
		//-- pull option
		l_arg := a_args[l_i]
		if l_arg[0] == '-' || l_arg[0] == '/' {
			var l_opt = l_arg
			var l_val string = ""
			if (l_i + 1) < len(a_args) {
				//-- make sure next value is not an option
				l_arg = a_args[l_i+1]
				if len(l_arg) == 0 || (l_arg[0] != '-' && l_arg[0] != '/' && l_arg[0] != '@') {
					//-- we have a value with the option
					l_val = l_arg
					l_i++
				}
			}

			//------------------------------------------------------------------
			//-- determine opt and tags if any exists, then add item to map
			var l_opt2, l_tags = xCheckOptForTags(l_opt)
			c.m_opts[strings.ToUpper(l_opt2)] = newSOptItem(l_opt2, l_val, l_file, l_tags)
		} else if l_arg[0] == '@' {
			//------------------------------------------------------------------
			//-- we have an include file
			//AddArgsFile(l_arg[1:])

			fmt.Printf("NEED TO ADD SUPPORT for include file to load = %s\n", l_arg)
		}

		/*
				//--------------------------------------------------------------
				//-- add item to list
				l_opt, l_tags = self.CheckOptForTags_(l_opt.upper())
				self.m_opts[l_opt] = {"val": self.subEnv_(l_val), "tags": l_tags}
			elif (l_arg[0] == '@') :
				self.AddArgsFile(self.subEnv_(l_arg[1:], True))

			l_i = l_i + 1
		*/
		//fmt.Sprintln("%s, %s, %s", l_i, l_opt, *l_val)
		l_i++

		//	   	self.m_isInit = 1
		//	*/
	}

	c.m_isInit = true
}

// -----------------------------------------------------------------------------
// -- AddArgsArray()
func (c *SCMDLine) AddArgsFile(a_file string) {
	fmt.Println("we are in AddArgsFile ....")
}

// =============================================================================
// -- private methods
// =============================================================================
// -- xCheckOptForTags
var oReTestForTags = regexp.MustCompile(`(^.*)(\#\{(.*)\}$)`)
var oReTestForTagsSplit = regexp.MustCompile(`[ ,\:\|]`)

func xCheckOptForTags(a_opt string) (string, []string) {
	var l_opt string

	//-- see if we have any tagss for the given opt
	var l_reAll = oReTestForTags.FindAllStringSubmatch(a_opt, -1)
	if l_reAll == nil || len(l_reAll[0]) != 4 {
		return a_opt, nil
	}

	//-- see if there are any tags to pull
	l_opt = l_reAll[0][1]
	if l_opt == "" || len(l_opt) == 0 {
		return a_opt, nil
	}

	var l_tags = make([]string, 0)
	l_tagsTmp := oReTestForTagsSplit.Split(l_reAll[0][3], -1)
	if len(l_tagsTmp) > 0 {
		l_haveHidden := false
		for _, l_tag := range l_tagsTmp {
			if strings.Contains("HIDE|HIDDEN|SECRET", l_tag) {
				if !l_haveHidden {
					l_tags = append(l_tags, "HIDE")
					l_haveHidden = true
				}
			} else {
				l_tags = append(l_tags, l_tag)
			}
		}
	}

	return l_opt, l_tags
}

// -----------------------------------------------------------------------------
// -- xSubEnv
func xSubEnv(a_str string) string {
	//--------------------------------------------------------------------------
	//-- see if anything to check need at least string of length 4 to process
	if len(a_str) < 4 {
		return ""
	}
	var l_str = a_str

	//--------------------------------------------------------------------------
	//-- see if we are going to sub the opt with environment values
	//	for strings.Index(l_str, "${") > -1 {
	for strings.Contains(l_str, "${") {
		l_p1 := strings.Index(l_str, "${")
		l_p2 := strings.Index(l_str[l_p1+2:], "}")
		if l_p1 >= 0 && l_p2 > l_p1+4 {
			l_envSub := strings.ToUpper(l_str[l_p1+2 : l_p1+l_p2+2])

			l_strSubstr := strings.Builder{}
			l_strSubstr.Grow(len(l_str) * 2)
			l_strSubstr.WriteString(l_str[:l_p1])
			l_strSubstr.WriteString(os.Getenv(l_envSub))
			l_strSubstr.WriteString(l_str[l_p1+l_p2+3:])
			l_str = l_strSubstr.String()
		}
	}

	return l_str
}
func (c *SCMDLine) AddArgsLine(a_line string) {
	fmt.Println("we are in AddArgsFile ....")
}
